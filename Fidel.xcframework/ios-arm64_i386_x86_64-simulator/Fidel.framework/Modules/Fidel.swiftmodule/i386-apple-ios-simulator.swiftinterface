// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target i386-apple-ios9.1-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Fidel
import AVKit
@_exported import Fidel
import Foundation
import Swift
import UIKit
public enum ProgramType : Swift.Equatable {
  case transactionSelect
  case transactionStream
  public static func == (a: ProgramType, b: ProgramType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct FidelError : Swift.Equatable, Swift.Decodable {
  public let message: Swift.String
  public let date: Foundation.Date
  public let type: FidelErrorType
  public init(from decoder: Swift.Decoder) throws
  public static func == (a: FidelError, b: FidelError) -> Swift.Bool
}
public enum CardScheme : Swift.Equatable {
  case visa
  case mastercard
  case americanExpress
  public static var allSupportedCardSchemes: Swift.Set<CardScheme> {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: CardScheme, b: CardScheme) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum FidelErrorType : Swift.Error, Swift.Equatable {
  case sdkConfigurationError
  case userCanceled
  case enrollmentError(EnrollmentError)
  case verificationError(VerificationError)
  public static func == (a: FidelErrorType, b: FidelErrorType) -> Swift.Bool
}
public enum EnrollmentError : Swift.String, Swift.Equatable, Swift.Error, Swift.Decodable {
  case cardAlreadyExists
  case invalidProgramID
  case invalidSDKKey
  case inexistentProgram
  case unexpected
  public init(from decoder: Swift.Decoder) throws
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct EnrollmentResult : Swift.Equatable, Swift.Decodable {
  public let cardID: Swift.String
  public let accountID: Swift.String
  public let programID: Swift.String
  public let enrollmentDate: Foundation.Date
  public let scheme: CardScheme
  public let isLive: Swift.Bool
  public let cardFirstNumbers: Swift.String?
  public let cardLastNumbers: Swift.String?
  public let cardExpirationYear: Swift.Int
  public let cardExpirationMonth: Swift.Int
  public let cardIssuingCountry: Country
  public let metaData: [Swift.String : Any]?
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: EnrollmentResult, rhs: EnrollmentResult) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class Fidel {
  public typealias OnFidelResult = (FidelResult) -> Swift.Void
  public static var sdkKey: Swift.String! {
    get
    set
  }
  public static var programID: Swift.String!
  public static var programType: ProgramType
  public static var bannerImage: UIKit.UIImage?
  public static var shouldAutoScanCard: Swift.Bool
  public static var metaData: [Swift.String : Any]?
  public static var allowedCountries: Swift.Set<Country>
  public static var defaultSelectedCountry: Country
  public static var supportedCardSchemes: Swift.Set<CardScheme>
  public static var companyName: Swift.String!
  public static var programName: Swift.String
  public static var termsAndConditionsURL: Swift.String?
  public static var privacyPolicyURL: Swift.String?
  public static var deleteInstructions: Swift.String
  public static var onResult: OnFidelResult?
  public static func start(from startingViewController: UIKit.UIViewController)
  @objc deinit
}
extension KeyedDecodingContainer {
  public func decode(_ type: [Any].Type, forKey key: Swift.KeyedDecodingContainer<K>.Key) throws -> [Any]
  public func decode(_ type: [Swift.String : Any].Type, forKey key: Swift.KeyedDecodingContainer<K>.Key) throws -> [Swift.String : Any]
  public func decodeIfPresent(_ type: [Swift.String : Any].Type, forKey key: Swift.KeyedDecodingContainer<K>.Key) throws -> [Swift.String : Any]?
}
public enum FidelResult : Swift.Equatable {
  case enrollmentResult(EnrollmentResult)
  case verificationSuccessful
  case error(FidelError)
  public static func == (a: FidelResult, b: FidelResult) -> Swift.Bool
}
public enum VerificationError : Swift.String, Swift.Equatable, Swift.Error, Swift.Decodable {
  case unexpected
  case unauthorized
  case invalidSDKKey
  case incorrectAmount
  case maximumAttemptsReached
  case cardAlreadyVerified
  case cardNotFound
  case verificationNotFound
  case genericError
  public init(from decoder: Swift.Decoder) throws
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum Country {
  case canada
  case ireland
  case japan
  case sweden
  case unitedArabEmirates
  case unitedKingdom
  case unitedStates
  public static var allCountries: Swift.Set<Country> {
    get
  }
  public static func == (a: Country, b: Country) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ProgramType : Swift.Hashable {}
extension CardScheme : Swift.Hashable {}
extension EnrollmentError : Swift.Hashable {}
extension EnrollmentError : Swift.RawRepresentable {}
extension VerificationError : Swift.Hashable {}
extension VerificationError : Swift.RawRepresentable {}
extension Country : Swift.Equatable {}
extension Country : Swift.Hashable {}
