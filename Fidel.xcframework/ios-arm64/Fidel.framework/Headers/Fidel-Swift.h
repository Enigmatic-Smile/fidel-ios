#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
#ifndef FIDEL_SWIFT_H
#define FIDEL_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Fidel",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)




SWIFT_CLASS("_TtC5Fidel8DateTime")
@interface DateTime : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSString;
@class SplitResult;
enum SplitEvent : NSInteger;

SWIFT_PROTOCOL("_TtP5Fidel11SplitClient_")
@protocol SplitClient
- (NSString * _Nonnull)getTreatment:(NSString * _Nonnull)split attributes:(NSDictionary<NSString *, id> * _Nullable)attributes SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getTreatment:(NSString * _Nonnull)split SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, NSString *> * _Nonnull)getTreatmentsForSplits:(NSArray<NSString *> * _Nonnull)splits attributes:(NSDictionary<NSString *, id> * _Nullable)attributes SWIFT_WARN_UNUSED_RESULT;
- (SplitResult * _Nonnull)getTreatmentWithConfig:(NSString * _Nonnull)split SWIFT_WARN_UNUSED_RESULT;
- (SplitResult * _Nonnull)getTreatmentWithConfig:(NSString * _Nonnull)split attributes:(NSDictionary<NSString *, id> * _Nullable)attributes SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, SplitResult *> * _Nonnull)getTreatmentsWithConfigForSplits:(NSArray<NSString *> * _Nonnull)splits attributes:(NSDictionary<NSString *, id> * _Nullable)attributes SWIFT_WARN_UNUSED_RESULT;
- (void)onEvent:(enum SplitEvent)event execute:(void (^ _Nonnull)(void))action;
- (BOOL)trackWithTrafficType:(NSString * _Nonnull)trafficType eventType:(NSString * _Nonnull)eventType SWIFT_WARN_UNUSED_RESULT;
- (BOOL)trackWithTrafficType:(NSString * _Nonnull)trafficType eventType:(NSString * _Nonnull)eventType value:(double)value SWIFT_WARN_UNUSED_RESULT;
- (BOOL)trackWithEventType:(NSString * _Nonnull)eventType SWIFT_WARN_UNUSED_RESULT;
- (BOOL)trackWithEventType:(NSString * _Nonnull)eventType value:(double)value SWIFT_WARN_UNUSED_RESULT;
/// Creates or updates the value for the given attribute
- (BOOL)setAttributeWithName:(NSString * _Nonnull)name value:(id _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the value of a given attribute so it can be checked by the customer if needed
- (id _Nullable)getAttributeWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// It will create or update all the given attributes
- (BOOL)setAttributes:(NSDictionary<NSString *, id> * _Nonnull)values SWIFT_WARN_UNUSED_RESULT;
/// Retrieve the full attributes map
- (NSDictionary<NSString *, id> * _Nullable)getAttributes SWIFT_WARN_UNUSED_RESULT;
/// Removes a given attribute from the map
- (BOOL)removeAttributeWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Clears all attributes stored in the SDK.
- (BOOL)clearAttributes SWIFT_WARN_UNUSED_RESULT;
- (void)flush;
- (void)destroy;
- (void)destroyWithCompletion:(void (^ _Nullable)(void))completion;
- (BOOL)trackWithTrafficType:(NSString * _Nonnull)trafficType eventType:(NSString * _Nonnull)eventType properties:(NSDictionary<NSString *, id> * _Nullable)properties SWIFT_WARN_UNUSED_RESULT;
- (BOOL)trackWithTrafficType:(NSString * _Nonnull)trafficType eventType:(NSString * _Nonnull)eventType value:(double)value properties:(NSDictionary<NSString *, id> * _Nullable)properties SWIFT_WARN_UNUSED_RESULT;
- (BOOL)trackWithEventType:(NSString * _Nonnull)eventType properties:(NSDictionary<NSString *, id> * _Nullable)properties SWIFT_WARN_UNUSED_RESULT;
- (BOOL)trackWithEventType:(NSString * _Nonnull)eventType value:(double)value properties:(NSDictionary<NSString *, id> * _Nullable)properties SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC5Fidel18DefaultSplitClient")
@interface DefaultSplitClient : NSObject <SplitClient>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface DefaultSplitClient (SWIFT_EXTENSION(Fidel))
- (void)onEvent:(enum SplitEvent)event execute:(void (^ _Nonnull)(void))action;
@end


@interface DefaultSplitClient (SWIFT_EXTENSION(Fidel))
- (void)flush;
- (void)destroy;
- (void)destroyWithCompletion:(void (^ _Nullable)(void))completion;
@end


@interface DefaultSplitClient (SWIFT_EXTENSION(Fidel))
- (SplitResult * _Nonnull)getTreatmentWithConfig:(NSString * _Nonnull)split SWIFT_WARN_UNUSED_RESULT;
- (SplitResult * _Nonnull)getTreatmentWithConfig:(NSString * _Nonnull)split attributes:(NSDictionary<NSString *, id> * _Nullable)attributes SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getTreatment:(NSString * _Nonnull)split SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getTreatment:(NSString * _Nonnull)split attributes:(NSDictionary<NSString *, id> * _Nullable)attributes SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, NSString *> * _Nonnull)getTreatmentsForSplits:(NSArray<NSString *> * _Nonnull)splits attributes:(NSDictionary<NSString *, id> * _Nullable)attributes SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, SplitResult *> * _Nonnull)getTreatmentsWithConfigForSplits:(NSArray<NSString *> * _Nonnull)splits attributes:(NSDictionary<NSString *, id> * _Nullable)attributes SWIFT_WARN_UNUSED_RESULT;
@end


@interface DefaultSplitClient (SWIFT_EXTENSION(Fidel))
- (BOOL)setAttributeWithName:(NSString * _Nonnull)name value:(id _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)getAttributeWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setAttributes:(NSDictionary<NSString *, id> * _Nonnull)values SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nullable)getAttributes SWIFT_WARN_UNUSED_RESULT;
- (BOOL)removeAttributeWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (BOOL)clearAttributes SWIFT_WARN_UNUSED_RESULT;
@end


@interface DefaultSplitClient (SWIFT_EXTENSION(Fidel))
- (BOOL)trackWithTrafficType:(NSString * _Nonnull)trafficType eventType:(NSString * _Nonnull)eventType SWIFT_WARN_UNUSED_RESULT;
- (BOOL)trackWithTrafficType:(NSString * _Nonnull)trafficType eventType:(NSString * _Nonnull)eventType value:(double)value SWIFT_WARN_UNUSED_RESULT;
- (BOOL)trackWithEventType:(NSString * _Nonnull)eventType SWIFT_WARN_UNUSED_RESULT;
- (BOOL)trackWithEventType:(NSString * _Nonnull)eventType value:(double)value SWIFT_WARN_UNUSED_RESULT;
- (BOOL)trackWithTrafficType:(NSString * _Nonnull)trafficType eventType:(NSString * _Nonnull)eventType properties:(NSDictionary<NSString *, id> * _Nullable)properties SWIFT_WARN_UNUSED_RESULT;
- (BOOL)trackWithTrafficType:(NSString * _Nonnull)trafficType eventType:(NSString * _Nonnull)eventType value:(double)value properties:(NSDictionary<NSString *, id> * _Nullable)properties SWIFT_WARN_UNUSED_RESULT;
- (BOOL)trackWithEventType:(NSString * _Nonnull)eventType properties:(NSDictionary<NSString *, id> * _Nullable)properties SWIFT_WARN_UNUSED_RESULT;
- (BOOL)trackWithEventType:(NSString * _Nonnull)eventType value:(double)value properties:(NSDictionary<NSString *, id> * _Nullable)properties SWIFT_WARN_UNUSED_RESULT;
@end

@class Key;
@protocol SplitManager;

/// This protocol was renamed from SplitFactoryProtocol to SplitFactory
/// to follow Swift guidelines
/// Also all methods where replaced by read only variables following Uniform Access Principle
SWIFT_PROTOCOL("_TtP5Fidel12SplitFactory_")
@protocol SplitFactory
/// Default Split client instance. This would be the first client created on factory init
///
/// returns:
/// An instance of a class implementing SplitClient protocol
@property (nonatomic, readonly, strong) id <SplitClient> _Nonnull client;
/// Allows getting a new client instance for other Key using the current created factory
/// \param key The corresponding Key object for this new SplitClient
///
///
/// returns:
/// An instance of a class implementing SplitClient protocol
- (id <SplitClient> _Nonnull)clientWithKey:(Key * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Allows getting a new client instance for other Key using the current created factory
/// \param matchingKey A matching key to create a Key object for this new SplitClient
///
///
/// returns:
/// An instance of a class implementing SplitClient protocol
- (id <SplitClient> _Nonnull)clientWithMatchingKey:(NSString * _Nonnull)matchingKey SWIFT_WARN_UNUSED_RESULT;
/// Allows getting a new client instance for other Key using the current created factory
/// \param matchingKey The matching key to create a Key object for this new SplitClient
///
/// \param bucketingKey The bucketing key to create a Key object for this new SplitClient
///
///
/// returns:
/// An instance of a class implementing SplitClient protocol
- (id <SplitClient> _Nonnull)clientWithMatchingKey:(NSString * _Nonnull)matchingKey bucketingKey:(NSString * _Nullable)bucketingKey SWIFT_WARN_UNUSED_RESULT;
/// Current Split manager instance
///
/// returns:
/// The current instance of a class implementing SplitManager protocol
@property (nonatomic, readonly, strong) id <SplitManager> _Nonnull manager;
/// Current Split SDK Version
///
/// returns:
/// A String representation of the current SDK version
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
@end


/// Default implementation of SplitManager protocol
SWIFT_CLASS("_TtC5Fidel19DefaultSplitFactory")
@interface DefaultSplitFactory : NSObject <SplitFactory>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkVersion;)
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) id <SplitClient> _Nonnull client;
@property (nonatomic, readonly, strong) id <SplitManager> _Nonnull manager;
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
- (id <SplitClient> _Nonnull)clientWithKey:(Key * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (id <SplitClient> _Nonnull)clientWithMatchingKey:(NSString * _Nonnull)matchingKey SWIFT_WARN_UNUSED_RESULT;
- (id <SplitClient> _Nonnull)clientWithMatchingKey:(NSString * _Nonnull)matchingKey bucketingKey:(NSString * _Nullable)bucketingKey SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SplitClientConfig;

/// Protocol describing the necessary components to build
/// a SplitFactory concrete implementation
SWIFT_PROTOCOL("_TtP5Fidel19SplitFactoryBuilder_")
@protocol SplitFactoryBuilder
/// Sets the client API Key
/// returns: the current instance of SplitFactoryBuilder implementation
- (id <SplitFactoryBuilder> _Nonnull)setApiKey:(NSString * _Nonnull)apiKey;
/// Sets the Matching Key to use. This method is specially usefull when creating
/// a Key without Bucketing Key. If no Matching Key or Key is set the build method
/// will fail.
/// \param matchingKey A string representing matching key
///
///
/// returns:
/// the current instance of SplitFactoryBuilder implementation
- (id <SplitFactoryBuilder> _Nonnull)setMatchingKey:(NSString * _Nonnull)matchingKey;
/// Sets the Bucketing Key to use. This method could be used in conjunction with setMatchingKey
/// to avoid creating explicitly a Key instance
/// \param bucketingKey A string representing bucketing key
///
///
/// returns:
/// the current instance of SplitFactoryBuilder implementation
- (id <SplitFactoryBuilder> _Nonnull)setBucketingKey:(NSString * _Nonnull)bucketingKey;
/// Sets the Key to use. This method could be used instead of setMatchingKey
/// and setBucketing
/// \param key An instances of Key class
///
///
/// returns:
/// the current instance of SplitFactoryBuilder implementation
- (id <SplitFactoryBuilder> _Nonnull)setKey:(Key * _Nonnull)key;
/// Sets the Split configuration to use. If this method is avoided
/// default configuration values will be used
/// \param config An instances of SplitConfig class
///
///
/// returns:
/// the current instance of SplitFactoryBuilder implementation
- (id <SplitFactoryBuilder> _Nonnull)setConfig:(SplitClientConfig * _Nonnull)config;
/// Builds the SplitFactory implementation instance based on set values
///
/// returns:
/// An instance of SplitFactory protocol implementation
- (id <SplitFactory> _Nullable)build SWIFT_WARN_UNUSED_RESULT;
@end


/// Default implementation of factory builder.
/// This class is intended to use as a kind of Director in the future. It will use
/// another concrete class implementing the same protocol to build the factory.
/// The idea is to avoid some boilerplate code when creating the factory.
/// For now it’s just the defaul factory.
SWIFT_CLASS("_TtC5Fidel26DefaultSplitFactoryBuilder")
@interface DefaultSplitFactoryBuilder : NSObject <SplitFactoryBuilder>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (id <SplitFactoryBuilder> _Nonnull)setApiKey:(NSString * _Nonnull)apiKey SWIFT_WARN_UNUSED_RESULT;
- (id <SplitFactoryBuilder> _Nonnull)setMatchingKey:(NSString * _Nonnull)matchingKey SWIFT_WARN_UNUSED_RESULT;
- (id <SplitFactoryBuilder> _Nonnull)setBucketingKey:(NSString * _Nonnull)bucketingKey SWIFT_WARN_UNUSED_RESULT;
- (id <SplitFactoryBuilder> _Nonnull)setKey:(Key * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (id <SplitFactoryBuilder> _Nonnull)setConfig:(SplitClientConfig * _Nonnull)config SWIFT_WARN_UNUSED_RESULT;
- (id <SplitFactory> _Nullable)build SWIFT_WARN_UNUSED_RESULT;
@end

@class SplitView;

SWIFT_PROTOCOL("_TtP5Fidel12SplitManager_")
@protocol SplitManager
@property (nonatomic, readonly, copy) NSArray<SplitView *> * _Nonnull splits;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull splitNames;
- (SplitView * _Nullable)splitWithFeatureName:(NSString * _Nonnull)featureName SWIFT_WARN_UNUSED_RESULT;
@end


/// Default implementation of SplitManager protocol
SWIFT_CLASS("_TtC5Fidel19DefaultSplitManager")
@interface DefaultSplitManager : NSObject <SplitManager>
@property (nonatomic, readonly, copy) NSArray<SplitView *> * _Nonnull splits;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull splitNames;
- (SplitView * _Nullable)splitWithFeatureName:(NSString * _Nonnull)featureName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSNumber;

SWIFT_CLASS("_TtC5Fidel10Impression")
@interface Impression : NSObject
@property (nonatomic, copy) NSString * _Nullable feature;
@property (nonatomic, copy) NSString * _Nullable keyName;
@property (nonatomic, copy) NSString * _Nullable treatment;
@property (nonatomic, readonly, strong) NSNumber * _Nullable timestamp;
@property (nonatomic, readonly, strong) NSNumber * _Nullable changeNum;
@property (nonatomic, copy) NSString * _Nullable label;
@property (nonatomic, copy) NSString * _Nullable bucketingKey;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable attributes;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC5Fidel8JKBCrypt")
@interface JKBCrypt : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC5Fidel3Key")
@interface Key : NSObject
- (nonnull instancetype)initWithMatchingKey:(NSString * _Nonnull)matchingKey bucketingKey:(NSString * _Nullable)bucketingKey OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Split Client protocol implementation for Locahost mode
/// This mode is intended to use for development purposes.
/// This implementation loads a local file called localhost.splits
/// which has the follwing line format: SPLIT TREATMENT
/// Also you can include comments to the file starting a line with the # character
/// <ul>
///   <li>
///     Example: A simple <code>localhost.splits</code> file
///     <code># This line is a comment</code><br/>
///     <code># Following line has split = FEATURE_ONE and treatment = ON</code><br/>
///     <code>FEATURE_ONE ON</code><br/>
///     <code>FEATURE_TWO OFF</code><br/>
///     <code># Previous line has split = FEATURE_TWO, treatment = OFF</code>\
///   </li>
/// </ul>
/// If a file called <em>localhost.splits</em> is included into the project bundle,
/// it will be used as initial file. It will be copied to the cache folder, then
/// it can be edited while app is running to simulate split changes.
/// When no <code>localhost.splits</code> is added to the app bundle, an empty file will be
/// created in cache folder.
/// Enable debug mode, the <em>localhost.splits</em> file location will be logged
/// to the console so that is possible to open it with a text editor when working
/// on the simulator.
/// When using the device to run the app, the file can be modified by
/// overwritting the app’s bundle from the <em>Device and Simulators</em> tool.
/// For more information
/// <ul>
///   <li>
///     see also:
///     <a href="https://docs.split.io/docs/ios-sdk-overview#section-localhost">Split iOS SDK</a>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC5Fidel20LocalhostSplitClient")
@interface LocalhostSplitClient : NSObject <SplitClient>
- (NSString * _Nonnull)getTreatment:(NSString * _Nonnull)split attributes:(NSDictionary<NSString *, id> * _Nullable)attributes SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getTreatment:(NSString * _Nonnull)split SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, NSString *> * _Nonnull)getTreatmentsForSplits:(NSArray<NSString *> * _Nonnull)splits attributes:(NSDictionary<NSString *, id> * _Nullable)attributes SWIFT_WARN_UNUSED_RESULT;
- (SplitResult * _Nonnull)getTreatmentWithConfig:(NSString * _Nonnull)split SWIFT_WARN_UNUSED_RESULT;
- (SplitResult * _Nonnull)getTreatmentWithConfig:(NSString * _Nonnull)split attributes:(NSDictionary<NSString *, id> * _Nullable)attributes SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, SplitResult *> * _Nonnull)getTreatmentsWithConfigForSplits:(NSArray<NSString *> * _Nonnull)splits attributes:(NSDictionary<NSString *, id> * _Nullable)attributes SWIFT_WARN_UNUSED_RESULT;
- (void)onEvent:(enum SplitEvent)event execute:(void (^ _Nonnull)(void))action;
- (BOOL)trackWithTrafficType:(NSString * _Nonnull)trafficType eventType:(NSString * _Nonnull)eventType SWIFT_WARN_UNUSED_RESULT;
- (BOOL)trackWithTrafficType:(NSString * _Nonnull)trafficType eventType:(NSString * _Nonnull)eventType value:(double)value SWIFT_WARN_UNUSED_RESULT;
- (BOOL)trackWithEventType:(NSString * _Nonnull)eventType SWIFT_WARN_UNUSED_RESULT;
- (BOOL)trackWithEventType:(NSString * _Nonnull)eventType value:(double)value SWIFT_WARN_UNUSED_RESULT;
- (BOOL)trackWithTrafficType:(NSString * _Nonnull)trafficType eventType:(NSString * _Nonnull)eventType properties:(NSDictionary<NSString *, id> * _Nullable)properties SWIFT_WARN_UNUSED_RESULT;
- (BOOL)trackWithTrafficType:(NSString * _Nonnull)trafficType eventType:(NSString * _Nonnull)eventType value:(double)value properties:(NSDictionary<NSString *, id> * _Nullable)properties SWIFT_WARN_UNUSED_RESULT;
- (BOOL)trackWithEventType:(NSString * _Nonnull)eventType properties:(NSDictionary<NSString *, id> * _Nullable)properties SWIFT_WARN_UNUSED_RESULT;
- (BOOL)trackWithEventType:(NSString * _Nonnull)eventType value:(double)value properties:(NSDictionary<NSString *, id> * _Nullable)properties SWIFT_WARN_UNUSED_RESULT;
- (void)flush;
- (void)destroy;
- (void)destroyWithCompletion:(void (^ _Nullable)(void))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface LocalhostSplitClient (SWIFT_EXTENSION(Fidel))
- (BOOL)setAttributeWithName:(NSString * _Nonnull)name value:(id _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)getAttributeWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setAttributes:(NSDictionary<NSString *, id> * _Nonnull)values SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nullable)getAttributes SWIFT_WARN_UNUSED_RESULT;
- (BOOL)removeAttributeWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (BOOL)clearAttributes SWIFT_WARN_UNUSED_RESULT;
@end


/// SplitFactory implementation for Localhost mode
/// This mode is intended to use during development.
/// Check LocalhostSplitClient class for more information
/// seealso:
///
/// <a href="https://docs.split.io/docs/ios-sdk-overview#section-localhost">Split iOS SDK</a>
SWIFT_CLASS("_TtC5Fidel21LocalhostSplitFactory")
@interface LocalhostSplitFactory : NSObject <SplitFactory>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkVersion;)
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) id <SplitClient> _Nonnull client;
@property (nonatomic, readonly, strong) id <SplitManager> _Nonnull manager;
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
- (id <SplitClient> _Nonnull)clientWithKey:(Key * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (id <SplitClient> _Nonnull)clientWithMatchingKey:(NSString * _Nonnull)matchingKey SWIFT_WARN_UNUSED_RESULT;
- (id <SplitClient> _Nonnull)clientWithMatchingKey:(NSString * _Nonnull)matchingKey bucketingKey:(NSString * _Nullable)bucketingKey SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC5Fidel9Partition")
@interface Partition : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface Partition (SWIFT_EXTENSION(Fidel))
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end

@class ServiceEndpointsBuilder;

SWIFT_CLASS("_TtC5Fidel16ServiceEndpoints")
@interface ServiceEndpoints : NSObject
+ (ServiceEndpointsBuilder * _Nonnull)builder SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("Builder")
@interface ServiceEndpointsBuilder : NSObject
/// The rest endpoint that sdk will hit for latest features and segments.
/// @param Endpoint MUST NOT be null
/// @return this builder
- (nonnull instancetype)setSdkEndpoint:(NSString * _Nonnull)sdkEndpoint SWIFT_WARN_UNUSED_RESULT;
/// The rest endpoint that sdk will hit to send events and impressions
/// @param eventsEndpoint
/// @return this builder
- (nonnull instancetype)setEventsEndpoint:(NSString * _Nonnull)eventsEndpoint SWIFT_WARN_UNUSED_RESULT;
/// The rest endpoint that sdk will hit to get an SSE authentication token
/// to subscribe to SSE channels and receive update events
/// @param authServiceEndpoint
/// @return this builder
- (nonnull instancetype)setAuthServiceEndpoint:(NSString * _Nonnull)authServiceEndpoint SWIFT_WARN_UNUSED_RESULT;
/// The rest endpoint that sdk will hit to subscribe to SSE channels
/// and receive update events
/// @param streamingServiceEndpoint
/// @return this builder
- (nonnull instancetype)setStreamingServiceEndpoint:(NSString * _Nonnull)streamingServiceEndpoint SWIFT_WARN_UNUSED_RESULT;
/// The rest endpoint that sdk will hit to send telemetry data
/// @param telemetryServiceEndpoint
/// @return this builder
- (nonnull instancetype)setTelemetryServiceEndpoint:(NSString * _Nonnull)telemetryServiceEndpoint SWIFT_WARN_UNUSED_RESULT;
- (ServiceEndpoints * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP5Fidel9SplitBase_")
@protocol SplitBase
@end


SWIFT_CLASS("_TtC5Fidel19SplitBgSynchronizer")
@interface SplitBgSynchronizer : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SplitBgSynchronizer * _Nonnull shared;)
+ (SplitBgSynchronizer * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)registerWithApiKey:(NSString * _Nonnull)apiKey userKey:(NSString * _Nonnull)userKey;
- (void)unregisterWithApiKey:(NSString * _Nonnull)apiKey userKey:(NSString * _Nonnull)userKey;
- (void)unregisterAll;
- (void)scheduleWithServiceEndpoints:(ServiceEndpoints * _Nullable)serviceEndpoints;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class SyncConfig;

SWIFT_CLASS("_TtC5Fidel17SplitClientConfig")
@interface SplitClientConfig : NSObject
/// How many milliseconds to wait before triggering a timeout event when the SDK is being initialized.
/// Default: -1 (means no timeout)
@property (nonatomic) NSInteger sdkReadyTimeOut;
/// The SDK will poll Split servers for changes to feature Splits at this rate (in seconds). Default 3600 (1 hour)
@property (nonatomic) NSInteger featuresRefreshRate;
/// This configuration controls how quickly does the cache expire after a write (in seconds).
/// Default: 1800 seconds (30 minutes)
@property (nonatomic) NSInteger impressionRefreshRate;
/// Maximum number of impressions to send in one block to the server.
/// Default 100
@property (nonatomic) int64_t impressionsChunkSize;
/// The SDK will poll Split servers for changes to segments at this rate (in seconds).
/// Default: 1800 seconds (30 minutes)
@property (nonatomic) NSInteger segmentsRefreshRate;
/// Default queue size for impressions. Default: 30K
@property (nonatomic) NSInteger impressionsQueueSize;
/// Timeout for HTTP calls in seconds. Default 30 seconds
@property (nonatomic) NSInteger connectionTimeout;
/// The traffic type associated with the client key.
/// If it’s present, it’s binded to the client instance, exactly as the key.
/// If not, we will expect the traffic type on each .track() call. This is an optional value.
@property (nonatomic, copy) NSString * _Nullable trafficType;
/// How much will we wait for the first events flush. Default: 10s.
@property (nonatomic) NSInteger eventsFirstPushWindow;
/// The schedule time for events flush after the first one. Default:  1800 seconds (30 minutes)
@property (nonatomic) NSInteger eventsPushRate;
/// The max size of the events queue. If the queue is full, we should flush. Default: 10000
@property (nonatomic) int64_t eventsQueueSize;
/// The amount of events to send in a POST request. Default: 2000
@property (nonatomic) NSInteger eventsPerPush;
/// The schedule time for metrics flush after the first one. Default:  1800 seconds (30 minutes)
@property (nonatomic) NSInteger metricsPushRate;
/// Client API key for company. Get it from Split admin dashboard.
@property (nonatomic, copy) NSString * _Nonnull apiKey;
@property (nonatomic, strong) ServiceEndpoints * _Nonnull serviceEndpoints;
/// Enables debug messages in console.
/// This method is deprecated in favor of logLevel.
@property (nonatomic) BOOL isDebugModeEnabled SWIFT_DEPRECATED_MSG("Use logLevel instead");
/// / Enables verbose messages in console.
/// This method is deprecated in favor of logLevel.
@property (nonatomic) BOOL isVerboseModeEnabled SWIFT_DEPRECATED_MSG("Use logLevel instead");
- (void)setWithLogLevel:(NSString * _Nonnull)logLevel;
/// The logic to handle an impression log generated during a getTreatment call
/// <ul>
///   <li>
///     Parameters
///   </li>
///   <li>
///     A closure of type SplitImpressionListener, that means (SplitImpression) -> Void
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable impressionListener)(Impression * _Nonnull);
/// Data folder to store localhost splits file
/// <ul>
///   <li>
///     Default: localhost
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nonnull localhostDataFolder;
/// Localhost splits file name
@property (nonatomic, copy) NSString * _Nonnull splitFile;
/// Enable labels for impressions
@property (nonatomic) BOOL isLabelsEnabled;
/// Allows  to pass a list of filters for the splits that will be downloaded
/// Use the SyncConfig builder and Split Filter class to build correct filters
@property (nonatomic, strong) SyncConfig * _Nonnull sync;
/// Whether we should attempt to use streaming or not. If the variable is false,
/// the SDK will start in polling mode and stay that way.
/// Default: true
@property (nonatomic) BOOL streamingEnabled;
/// Setup the impressions mode.
/// @param mode Values:<br>
/// DEBUG: All impressions are sent and
/// OPTIMIZED: Will send unique impressions in a timeframe in order to reduce how
/// many times impressions are posted.
/// NONE: Only capture unique keys evaluated for a particular feature flag instead of full blown impressions.
/// @return: This builder
/// @default: OPTIMIZED
@property (nonatomic, copy) NSString * _Nonnull impressionsMode;
/// Default: 1
@property (nonatomic) NSInteger pushRetryBackoffBase;
/// The SDK will load changes from Splits files base on this feature. Default = -1 (Deactivated)
@property (nonatomic) NSInteger offlineRefreshRate;
/// When set to true app sync is done while app is in background.
/// Otherwise synchronization only occurs while app
/// is in foreground
@property (nonatomic) BOOL synchronizeInBackground;
/// The schedule time for telemetry flush after the first one.
/// Default: 3600 seconds (1 hour)
@property (nonatomic) NSInteger telemetryRefreshRate;
/// Make it mutable to allow testing (Default: false)
/// Enables persistent storage for common attributes  given by the user during the SDK
/// lifecycle to use them in every evaluation.
/// If this flags is set to false, attributes will be stored in memory only and their values
/// will be lost in SDK detroy.
@property (nonatomic) BOOL persistentAttributesEnabled;
/// Sync all retrieved data only once on init (Default: false)
/// No streaming neither polling service is enabled.
/// To get last definitions, the SDK have to be recreated
@property (nonatomic) BOOL syncEnabled;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, SplitEvent, open) {
  SplitEventSdkReady = 0,
  SplitEventSdkReadyTimedOut = 1,
  SplitEventSdkReadyFromCache = 2,
  SplitEventSdkUpdated = 3,
};


SWIFT_CLASS("_TtC5Fidel14SplitEventTask")
@interface SplitEventTask : NSObject
- (void)onPostExecuteWithClient:(id <SplitClient> _Nonnull)client;
- (void)onPostExecuteViewWithClient:(id <SplitClient> _Nonnull)client;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC5Fidel11SplitFilter")
@interface SplitFilter : NSObject
+ (SplitFilter * _Nonnull)byName:(NSArray<NSString *> * _Nonnull)values SWIFT_WARN_UNUSED_RESULT;
+ (SplitFilter * _Nonnull)byPrefix:(NSArray<NSString *> * _Nonnull)values SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC5Fidel11SplitResult")
@interface SplitResult : NSObject
@property (nonatomic, copy) NSString * _Nonnull treatment;
@property (nonatomic, copy) NSString * _Nullable config;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC5Fidel9SplitView")
@interface SplitView : NSObject
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSString * _Nullable trafficType;
@property (nonatomic, readonly) BOOL isKilled;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable treatments;
@property (nonatomic, readonly, strong) NSNumber * _Nullable changeNum;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable configs;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface SplitView (SWIFT_EXTENSION(Fidel))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class SyncConfigBuilder;

SWIFT_CLASS("_TtC5Fidel10SyncConfig")
@interface SyncConfig : NSObject
+ (SyncConfigBuilder * _Nonnull)builder SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("Builder")
@interface SyncConfigBuilder : NSObject
- (SyncConfig * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (SyncConfigBuilder * _Nonnull)addSplitFilter:(SplitFilter * _Nonnull)filter;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
