#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
#ifndef FIDEL_SWIFT_H
#define FIDEL_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Fidel",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// Enum with supported card schemes to be used for linking with Fidel programs.
/// <h2>See also:</h2>
/// <ul>
///   <li>
///     <a href="x-source-tag://supportedCardSchemes">supportedCardSchemes</a>
///   </li>
/// </ul>
/// since:
/// 1.0
typedef SWIFT_ENUM_NAMED(NSInteger, FLCardScheme, "CardScheme", open) {
/// Visa card scheme available for Fidel programs.
/// since:
/// 1.0
  FLCardSchemeVisa = 0,
/// Mastercard card scheme available for Fidel programs.
/// since:
/// 1.0
  FLCardSchemeMastercard = 1,
/// American Express card scheme available for Fidel programs.
/// since:
/// 1.0
  FLCardSchemeAmericanExpress = 2,
};

/// The country of issue for a card linked with a Fidel program.
/// <h2>See also:</h2>
/// <ul>
///   <li>
///     <a href="x-source-tag://allowedCountries">Fidel.allowedCountries</a>.
///   </li>
/// </ul>
/// since:
/// 1.4.0
typedef SWIFT_ENUM_NAMED(NSInteger, FLCountry, "Country", open) {
/// Canada is a country of issue for a card linked with a Fidel program.
/// since:
/// 1.4.4
  FLCountryCanada = 0,
/// Ireland is a country of issue for a card linked with a Fidel program.
/// since:
/// 1.4.0
  FLCountryIreland = 1,
/// Japan is a country of issue for a card linked with a Fidel program.
/// since:
/// 1.4.2
  FLCountryJapan = 2,
/// Sweden is a country of issue for a card linked with a Fidel program.
/// since:
/// 1.4.0
  FLCountrySweden = 3,
/// United Arab Emirates is a country of issue for a card linked with a Fidel program.
/// since:
/// 1.8.7
  FLCountryUnitedArabEmirates = 4,
/// United Kingdom is a country of issue for a card linked with a Fidel program.
/// since:
/// 1.4.0
  FLCountryUnitedKingdom = 5,
/// United States is a country of issue for a card linked with a Fidel program.
/// since:
/// 1.4.0
  FLCountryUnitedStates = 6,
};

@class NSString;
@class UIImage;
@class NSNumber;
@class UIViewController;
@class FLLinkResult;
@class FLLinkError;

/// Use this facade class to initialise and start a Fidel card linking experience.
/// It has many static properties which you can set to configure and customize the experience.
/// <h2>See also:</h2>
/// <ul>
///   <li>
///     <a href="x-source-tag://apiKey">Fidel.apiKey</a> - Set your SDK key.
///   </li>
///   <li>
///     <a href="x-source-tag://programId">Fidel.programId</a> - Set you program ID.
///   </li>
///   <li>
///     <a href="x-source-tag://present">Fidel.present function</a> - Present the card linking UI.
///   </li>
/// </ul>
/// version:
/// 1.9.0
/// since:
/// 1.0
SWIFT_CLASS_NAMED("Fidel")
@interface FLFidel : NSObject
/// <em>Required</em> for card linking. Get it from your Fidel dashboard, Account Settings, SDK Keys section.
/// note:
/// If you use a <em>test SDK Key</em>, please use the following test card numbers:
/// <ul>
///   <li>
///     <em>VISA</em>: 4444000000004*** (the last 3 numbers can be anything)
///   </li>
///   <li>
///     <em>Mastercard</em>: 5555000000005*** (the last 3 numbers can be anything)
///   </li>
///   <li>
///     <em>American Express</em>: 3400000000003** or 3700000000003** (the last 2 numbers can be anything)
///   </li>
/// </ul>
/// <h2>See also:</h2>
/// <ul>
///   <li>
///     <a href="x-source-tag://programId">Fidel.programId</a> - Set you program ID.
///   </li>
/// </ul>
/// since:
/// 1.0
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable apiKey;)
+ (NSString * _Nullable)apiKey SWIFT_WARN_UNUSED_RESULT;
+ (void)setApiKey:(NSString * _Nullable)value;
/// <em>Required</em> for card linking. Get it from your Fidel dashboard.
/// <h2>See also:</h2>
/// <ul>
///   <li>
///     <a href="x-source-tag://apiKey">Fidel.apiKey</a> - Set your SDK key.
///   </li>
/// </ul>
/// since:
/// 1.0
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable programId;)
+ (NSString * _Nullable)programId SWIFT_WARN_UNUSED_RESULT;
+ (void)setProgramId:(NSString * _Nullable)value;
/// Will display the banner image that you set in this parameter at the top of the card details
/// The banner image will take the device’s width, but it has a fixed height of 100 pts.
/// The image view has an <code>Aspect Fill</code> content mode, which means that the banner image
/// that you set will fill its entire predefined area, while keeping the aspect ratio.
/// For the banner image that you can set, we suggest to use the aspect ratio of the smallest devices that you support.
/// If you support 4” iPhones (iPhone 5s, 5c etc.), the aspect ratio would be <em>320 : 100</em>.
/// If the smallest device that you support is 4.7” iPhones (iPhone 6, 7, 8 etc.),
/// the aspect ratio of your banner image would be <em>375 : 100</em>.
/// We’re just suggesting the aspect ratios, but you can make the image as pixel dense as you like.
/// Of course, you need to provide the image for all screen densities (x1, x2 and x3).
/// Please take into consideration that the banner image will be cropped from top and bottom sides, on wider devices.
/// This is because of the <code>Aspect Fill</code> content mode that we set for the image view.
/// Depending on what you want to display in the banner image, you might need to experiment a bit to make sure
/// that nothing important from the image is hidden. The most important information should be displayed in the
/// centre of the banner image.
/// note:
///
/// This parameter is <em>optional</em>.
/// The default value is <code>nil</code>.
/// since:
/// 1.0
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nullable bannerImage;)
+ (UIImage * _Nullable)bannerImage SWIFT_WARN_UNUSED_RESULT;
+ (void)setBannerImage:(UIImage * _Nullable)value;
/// When set to <code>true</code>, automatically starts card camera scanning UI.
/// After card scanning is finalized, the user will go to our normal card linking UI.
/// note:
/// This parameter is <em>optional</em>. The default value is <code>false</code>.
/// since:
/// 1.0
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL autoScan;)
+ (BOOL)autoScan SWIFT_WARN_UNUSED_RESULT;
+ (void)setAutoScan:(BOOL)value;
/// Use this object to store custom data assigned to a linked card. The metadata <code>"id"</code>
/// property is a non-unique index, so you can set it to a custom UID (unique identifier).
/// Later you can query the cards using the same metadata ID.
/// You can use our <a href="https://reference.fidel.uk/v1/reference#list-cards-from-metadata-id">List Cards from Metadata ID</a> API Endpoint. Example meta data:
/// \code
/// Fidel.metaData = [
///     "id": "this-is-the-metadata-id",
///     "myUserId": "123",
///     "customKey1": "customValue1"
/// ]
///
/// \endcode<h3>Useful documentation</h3>
/// <ul>
///   <li>
///     <a href="https://reference.fidel.uk/v1/reference#list-cards-from-metadata-id">List Cards from Metadata ID</a>
///   </li>
/// </ul>
/// note:
///
/// This parameter is <em>optional</em>.
/// The default value is <code>nil</code>.
/// since:
/// 1.0
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSDictionary<NSString *, id> * _Nullable metaData;)
+ (NSDictionary<NSString *, id> * _Nullable)metaData SWIFT_WARN_UNUSED_RESULT;
+ (void)setMetaData:(NSDictionary<NSString *, id> * _Nullable)value;
/// Sets the list of countries that a user can pick to be the card issuing country.
/// When 2 or more countries are set, users will be able to select the card issuing country with our country selection UI.
/// The SDK will send the appropriate country code, depending on the country the user selects.
/// If you set an array with only one country (<code>count</code> of this array == 1), the country selection UI will not be displayed in
/// the card details form. The country that you set will be considered the card issuing country for all cards linked with your
/// Fidel program.
/// If you set an empty array value, you will not be able to present the Fidel card linking UI.
/// Immediately after attempting to present the UI with an empty value set to this parameter,
/// you will receive a <code>FLLinkError</code> in your <a href="x-source-tag://present">present function</a> error callback.
/// <h2>Example:</h2>
/// \code
/// FLFidel.objc_allowedCountries = @[
///     @(FLCountryIreland),
///     @(FLCountryUnitedKingdom),
///     @(FLCountryJapan),
///     @(FLCountryUnitedStates),
///     @(FLCountrySweden)
/// ];
///
/// \endcodewarning:
/// If your countries array includes a North American country (US or Canada), you also need to provide a value
/// for the <a href="x-source-tag://termsConditionsURL">FLFidel.termsConditionsURL</a>
/// <h2>See also:</h2>
/// <ul>
///   <li>
///     <a href="x-source-tag://Fidel.Country">FLCountry</a>
///   </li>
///   <li>
///     <a href="x-source-tag://termsConditionsURL">FLFidel.termsConditionsURL</a>
///   </li>
///   <li>
///     The <a href="x-source-tag://present">present function</a> that presents the card linking UI and also registers success/failure callbacks
///   </li>
/// </ul>
/// note:
///
/// This parameter is <em>optional</em> to set, but it’s a <em>mandatory</em> property.
/// The default value is the array of all countries supported by Fidel.
/// since:
/// 1.8.3
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<NSNumber *> * _Nonnull objc_allowedCountries;)
+ (NSArray<NSNumber *> * _Nonnull)objc_allowedCountries SWIFT_WARN_UNUSED_RESULT;
+ (void)setObjc_allowedCountries:(NSArray<NSNumber *> * _Nonnull)newValue;
/// Sets a list of supported card schemes. If a card scheme is supported, users will be able to submit the card linking form
/// with the supported card. If a card scheme is not in the list, then the user will receive an error message while typing
/// the unsupported card number.
/// If you set a <code>nil</code> value, you will not be able to present the Fidel card linking UI.
/// Immediately after attempting to present the UI with a <code>nil</code> value set to this parameter, you will receive a
/// <code>FLLinkError</code> in your <a href="x-source-tag://present">present function</a> error callback.
/// <h2>Example:</h2>
/// \code
/// FLFidel.objc_supportedCardSchemes = [NSSet setWithObjects:
///                                      @(FLCardSchemeVisa),
///                                      @(FLCardSchemeMastercard),
///                                      @(FLCardSchemeAmericanExpress), nil];
///
/// \endcode<h2>See also:</h2>
/// <ul>
///   <li>
///     <a href="x-source-tag://Fidel.CardScheme">FLCardScheme</a>
///   </li>
/// </ul>
/// note:
///
/// This parameter is <em>optional</em> to set, but it’s a <em>mandatory</em> property.
/// The default value is a set of all supported card schemes.
/// since:
/// 1.5.1
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSSet<NSNumber *> * _Nonnull objc_supportedCardSchemes;)
+ (NSSet<NSNumber *> * _Nonnull)objc_supportedCardSchemes SWIFT_WARN_UNUSED_RESULT;
+ (void)setObjc_supportedCardSchemes:(NSSet<NSNumber *> * _Nonnull)value;
/// The value of this parameter will be used in the card linking consent text that the user will
/// need to read & agree with, before linking a card.
/// <h2>See also:</h2>
/// <ul>
///   <li>
///     <a href="x-source-tag://termsConditionsURL">termsConditionsURL</a>
///   </li>
///   <li>
///     <a href="x-source-tag://privacyURL">privacyURL</a>
///   </li>
///   <li>
///     <a href="x-source-tag://programName">programName</a>
///   </li>
///   <li>
///     <a href="x-source-tag://deleteInstructions">deleteInstructions</a>
///   </li>
/// </ul>
/// note:
///
/// The default value for this parameter is <code>"Company Name"</code>, so we suggest setting it.
/// The maximum number of characters allowed is <code>60</code>.
/// since:
/// 1.4.0
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull companyName;)
+ (NSString * _Nonnull)companyName SWIFT_WARN_UNUSED_RESULT;
+ (void)setCompanyName:(NSString * _Nonnull)value;
/// The value of this parameter will be used in the card linking consent text when the selected
/// country is North American country. That’s if a North American is set in the <code>allowedCountries</code> parameter.
/// If a North American country is not a member of the list, then you don’t need to set this parameter.
/// <h2>See also:</h2>
/// <ul>
///   <li>
///     <a href="x-source-tag://termsConditionsURL">termsConditionsURL</a>
///   </li>
///   <li>
///     <a href="x-source-tag://privacyURL">privacyURL</a>
///   </li>
///   <li>
///     <a href="x-source-tag://programName">programName</a>
///   </li>
///   <li>
///     <a href="x-source-tag://deleteInstructions">deleteInstructions</a>
///   </li>
/// </ul>
/// note:
///
/// This parameter is <em>optional</em>.
/// The default value for this parameter will be <code>"our"</code> (or the translated, equivalent text).
/// The maximum number of characters allowed is <code>60</code>.
/// since:
/// 1.8.0
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull programName;)
+ (NSString * _Nonnull)programName SWIFT_WARN_UNUSED_RESULT;
+ (void)setProgramName:(NSString * _Nonnull)value;
/// This parameter is used and is <em>mandatory</em> when the <a href="x-source-tag://allowedCountries">Fidel.allowedCountries</a>
/// parameter contains a North American country.
/// It is applied as a hyperlink over the <code>Terms and Conditions</code> (or translated equivalent) text.
/// If a valid URL is <em>not</em> provided in this scenario then you will not be able to present the card linking UI.
/// Instead you will receive a <code>LinkError</code> in your <a href="x-source-tag://present">present function</a> error callback.
/// The “Terms and Conditions”(or translated equivalent) text and the hyperlink will be displayed <em>only</em> when
/// the selected country is a North American country. For the other countries we display a different consent
/// text that does not need the terms and conditions URL.
/// <h2>See also:</h2>
/// <ul>
///   <li>
///     <a href="x-source-tag://termsConditionsURL">allowedCountries</a>
///   </li>
///   <li>
///     <a href="x-source-tag://companyName">companyName</a>
///   </li>
///   <li>
///     <a href="x-source-tag://privacyURL">privacyURL</a>
///   </li>
///   <li>
///     <a href="x-source-tag://programName">programName</a>
///   </li>
///   <li>
///     <a href="x-source-tag://deleteInstructions">deleteInstructions</a>
///   </li>
/// </ul>
/// note:
///
/// This parameter is <em>not used</em> and not needed in the card linking consent, if the <a href="x-source-tag://allowedCountries">Fidel.allowedCountries</a> parameter does not include a North American country.
/// The default value for this parameter is <code>nil</code>.
/// since:
/// 1.8.0
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable termsConditionsURL;)
+ (NSString * _Nullable)termsConditionsURL SWIFT_WARN_UNUSED_RESULT;
+ (void)setTermsConditionsURL:(NSString * _Nullable)value;
/// If you provide a value for this parameter, the card linking consent text will include a phrase
/// that will provide the user with more privacy related information at the link that you provide.
/// When the value of this parameter remains <code>nil</code> no such phrase will be displayed in
/// the card linking consent text.
/// If you provide an invalid URL string, you will not be able to
/// present the card linking UI. Instead you will receive a <code>LinkError</code> in your <a href="x-source-tag://present">present function</a> error callback, immediately after attempting to present the UI.
/// <h2>See also:</h2>
/// <ul>
///   <li>
///     <a href="x-source-tag://termsConditionsURL">allowedCountries</a>
///   </li>
///   <li>
///     <a href="x-source-tag://companyName">companyName</a>
///   </li>
///   <li>
///     <a href="x-source-tag://termsConditionsURL">termsConditionsURL</a>
///   </li>
///   <li>
///     <a href="x-source-tag://programName">programName</a>
///   </li>
///   <li>
///     <a href="x-source-tag://deleteInstructions">deleteInstructions</a>
///   </li>
/// </ul>
/// note:
///
/// This parameter is <em>optional</em>.
/// The default value is <code>nil</code>.
/// since:
/// 1.4.0
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable privacyURL;)
+ (NSString * _Nullable)privacyURL SWIFT_WARN_UNUSED_RESULT;
+ (void)setPrivacyURL:(NSString * _Nullable)value;
/// If you provide a value for this parameter you will provide helping instructions for users to
/// delete a linked card. We will display these instructions in the card linking consent text.
/// The user has to agree with it before linking a card.
/// This parameter is <em>optional</em>, but we suggest to set what’s appropriate for your users.
/// <h2>See also:</h2>
/// <ul>
///   <li>
///     <a href="x-source-tag://termsConditionsURL">allowedCountries</a>
///   </li>
///   <li>
///     <a href="x-source-tag://companyName">companyName</a>
///   </li>
///   <li>
///     <a href="x-source-tag://termsConditionsURL">termsConditionsURL</a>
///   </li>
///   <li>
///     <a href="x-source-tag://privacyURL">privacyURL</a>
///   </li>
///   <li>
///     <a href="x-source-tag://programName">programName</a>
///   </li>
/// </ul>
/// note:
///
/// The default value for this parameter will be <em>“going to your account settings”</em> (or the
/// equivalent, translated text)
/// The maximum number of characters allowed is 60.
/// since:
/// 1.4.0
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull deleteInstructions;)
+ (NSString * _Nonnull)deleteInstructions SWIFT_WARN_UNUSED_RESULT;
+ (void)setDeleteInstructions:(NSString * _Nonnull)value;
/// Presents the card linking UI.
/// To get the result use the <code>onCardLinkedCallback</code> and <code>onCardLinkFailedCallback</code> callback parameters.
/// <h2>See also:</h2>
/// <ul>
///   <li>
///     <a href="x-source-tag://OnCardLinked">OnCardLinked</a>
///   </li>
///   <li>
///     <a href="x-source-tag://OnCardLinkFailed">OnCardLinkFailed</a>
///   </li>
///   <li>
///     <a href="x-source-tag://LinkResult">LinkResult</a>
///   </li>
///   <li>
///     <a href="x-source-tag://LinkError">LinkError</a>
///   </li>
/// </ul>
/// since:
/// 1.0
/// \param presentingViewController the <code>ViewController</code> that will present the Fidel card linking <code>ViewController</code>. This is a <em>mandatory</em> parameter.
///
/// \param onCardLinkedCallback Will be called when card linking succeeds. It will send a <code>LinkResult</code> as a parameter. This is an <em>optional</em> parameter. Default value is <code>nil</code>.
///
/// \param onCardLinkFailedCallback Will be called when card linking fails. It will send a <code>LinkError</code> as a parameter. This is an <em>optional</em> parameter. Default value is <code>nil</code>.
///
+ (void)present:(UIViewController * _Nonnull)presentingViewController onCardLinkedCallback:(void (^ _Nullable)(FLLinkResult * _Nonnull))onCardLinkedCallback onCardLinkFailedCallback:(void (^ _Nullable)(FLLinkError * _Nonnull))onCardLinkFailedCallback;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// A card linking error result object which offers card linking error details.
/// <h2>See also:</h2>
/// <ul>
///   <li>
///     <a href="x-source-tag://OnCardLinkFailed">OnCardLinkFailed</a>
///   </li>
///   <li>
///     <a href="x-source-tag://LinkResult">LinkResult</a>
///   </li>
/// </ul>
/// since:
/// 1.0.2
SWIFT_CLASS_NAMED("LinkError")
@interface FLLinkError : NSObject
/// The unlocalized message of the error.
/// since:
/// 1.0.2
@property (nonatomic, copy) NSString * _Nonnull message;
/// The date the card linking error occurred. It is formatted as a string. Format of the date: <code>yyyy-MM-dd'T'HH:mm:ssZZZZZ</code>.
/// Example values: 2021-05-19T16:34:20.497Z.
/// since:
/// 1.0.2
@property (nonatomic, copy) NSString * _Nullable date;
/// The code of the error.
/// since:
/// 1.0.2
@property (nonatomic, copy) NSString * _Nullable code;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Check properties of this class to get details about the linked card.
/// You can obtain a LinkResult object by implementing the <code>onCardLinkedCallback</code> parameter of the <a href="x-source-tag://present">Fidel.present function</a>.
/// <h2>See also:</h2>
/// <ul>
///   <li>
///     <a href="x-source-tag://present">Fidel.present function</a>
///   </li>
///   <li>
///     <a href="x-source-tag://OnCardLinked">OnCardLinked</a>
///   </li>
///   <li>
///     <a href="x-source-tag://LinkError">LinkError</a>
///   </li>
/// </ul>
/// since:
/// 1.0.2
SWIFT_CLASS_NAMED("LinkResult")
@interface FLLinkResult : NSObject
/// The identifier of the card linked with your Fidel program.
/// since:
/// 1.0.2
@property (nonatomic, copy) NSString * _Nonnull id;
/// The date when the card was linked. It is formatted as a string. The following is an example: <code>2021-05-19T12:37:55.278Z</code>.
/// since:
/// 1.0.2
@property (nonatomic, copy) NSString * _Nullable created;
/// The date when the card was updated. In case of card linking, this date corresponds with <a href="x-source-tag://LinkResult.created">created</a> property. It is formatted as a string. The following is an example: <code>2021-05-19T12:37:55.278Z</code>.
/// <h2>See also:</h2>
/// <ul>
///   <li>
///     <a href="x-source-tag://LinkResult.created">created</a>
///   </li>
/// </ul>
/// warning:
/// Deprecated because it is always equal with <a href="x-source-tag://LinkResult.created">created</a> property. Please use <a href="x-source-tag://LinkResult.created">created</a> instead.
/// since:
/// 1.0.2
@property (nonatomic, copy) NSString * _Nullable updated SWIFT_DEPRECATED_MSG("Please use the `created` property instead.", "created");
/// The type of card that was linked. Possible values are: <code>"visa"</code>, <code>"mastercard"</code>, <code>"amex"</code>.
/// <h2>See also:</h2>
/// <ul>
///   <li>
///     <a href="x-source-tag://LinkResult.scheme">scheme</a>
///   </li>
/// </ul>
/// warning:
/// Deprecated because it is always equal with <a href="x-source-tag://LinkResult.scheme">scheme</a> property. Please use <a href="x-source-tag://LinkResult.scheme">scheme</a> instead.
/// since:
/// 1.0.2
@property (nonatomic, copy) NSString * _Nullable type SWIFT_DEPRECATED_MSG("Please use the `scheme` property instead.", "scheme");
/// The linked card scheme. Possible values are: <code>"visa"</code>, <code>"mastercard"</code>, <code>"amex"</code>.
/// since:
/// 1.0.2
@property (nonatomic, copy) NSString * _Nullable scheme;
/// The program identifier that the card was linked with.
/// since:
/// 1.0.2
@property (nonatomic, copy) NSString * _Nullable programId;
@property (nonatomic) BOOL mapped SWIFT_DEPRECATED;
/// This property will be <code>true</code> when your Fidel account is live. If your account is not
/// live then this property will be <code>false</code>.
/// since:
/// 1.0.2
@property (nonatomic) BOOL live;
/// If available, this property will be populated with the first 6 numbers of the linked card. To
/// turn on or off receiving these numbers in the card linking result object, please check your
/// Fidel account’s Security settings.
/// since:
/// 1.8.4
@property (nonatomic, copy) NSString * _Nullable firstNumbers;
/// If available, this property will be populated with the last 4 numbers of the linked card. To
/// turn on or off receiving these numbers in the card linking result object, please check your
/// Fidel account’s Security settings.
/// since:
/// 1.0.2
@property (nonatomic, copy) NSString * _Nullable lastNumbers;
/// The expiration year of the linked card. The values are full year values (2023),
/// not shortened year values (23).
/// since:
/// 1.0.2
@property (nonatomic) NSInteger expYear;
/// The expiration month of the linked card. The values start with <code>1</code> - January and end
/// with <code>12</code> - December.
/// since:
/// 1.0.2
@property (nonatomic) NSInteger expMonth;
/// The expiration date of the linked card, formatted as a string. Example values:
/// <ul>
///   <li>
///     2024-01-31T23:59:59.999Z
///   </li>
///   <li>
///     2023-12-31T23:59:59.999Z
///   </li>
/// </ul>
/// since:
/// 1.0.2
@property (nonatomic, copy) NSString * _Nullable expDate;
/// The country code of the linked card. Possible values: <code>"ARE"</code>(United Arab Emirates), <code>"CAN"</code> (Canada), <code>"GBR"</code> (Great Britain),
/// <code>"IRL"</code> (Ireland), <code>"JPN"</code> (Japan),
/// <code>"SWE"</code> (Sweden), <code>"USA"</code> (United States of America).
/// since:
/// 1.0.2
@property (nonatomic, copy) NSString * _Nullable countryCode;
/// The Fidel account identifier under which the card was linked to.
/// since:
/// 1.0.2
@property (nonatomic, copy) NSString * _Nullable accountId;
/// The custom data assigned to the linked card. You can use our <a href="https://reference.fidel.uk/v1/reference#list-cards-from-metadata-id">List Cards from Metadata ID</a>
/// API Endpoint to query the cards using the same metadata ID.
/// Example of meta data that you can set with the <a href="x-source-tag://metaData">Fidel.metadata</a> property:
/// \code
/// Fidel.metaData = [
///     "id": "this-is-the-metadata-id",
///     "myUserId": "123",
///     "customKey1": "customValue1"
/// ]
///
/// \endcodeWith the example above, you will receive the same values back.
/// <h2>See also:</h2>
/// <ul>
///   <li>
///     <a href="x-source-tag://metaData">Fidel.metadata</a>
///   </li>
/// </ul>
/// since:
/// 1.0.2
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable metaData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
#ifndef FIDEL_SWIFT_H
#define FIDEL_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Fidel",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// Enum with supported card schemes to be used for linking with Fidel programs.
/// <h2>See also:</h2>
/// <ul>
///   <li>
///     <a href="x-source-tag://supportedCardSchemes">supportedCardSchemes</a>
///   </li>
/// </ul>
/// since:
/// 1.0
typedef SWIFT_ENUM_NAMED(NSInteger, FLCardScheme, "CardScheme", open) {
/// Visa card scheme available for Fidel programs.
/// since:
/// 1.0
  FLCardSchemeVisa = 0,
/// Mastercard card scheme available for Fidel programs.
/// since:
/// 1.0
  FLCardSchemeMastercard = 1,
/// American Express card scheme available for Fidel programs.
/// since:
/// 1.0
  FLCardSchemeAmericanExpress = 2,
};

/// The country of issue for a card linked with a Fidel program.
/// <h2>See also:</h2>
/// <ul>
///   <li>
///     <a href="x-source-tag://allowedCountries">Fidel.allowedCountries</a>.
///   </li>
/// </ul>
/// since:
/// 1.4.0
typedef SWIFT_ENUM_NAMED(NSInteger, FLCountry, "Country", open) {
/// Canada is a country of issue for a card linked with a Fidel program.
/// since:
/// 1.4.4
  FLCountryCanada = 0,
/// Ireland is a country of issue for a card linked with a Fidel program.
/// since:
/// 1.4.0
  FLCountryIreland = 1,
/// Japan is a country of issue for a card linked with a Fidel program.
/// since:
/// 1.4.2
  FLCountryJapan = 2,
/// Sweden is a country of issue for a card linked with a Fidel program.
/// since:
/// 1.4.0
  FLCountrySweden = 3,
/// United Arab Emirates is a country of issue for a card linked with a Fidel program.
/// since:
/// 1.8.7
  FLCountryUnitedArabEmirates = 4,
/// United Kingdom is a country of issue for a card linked with a Fidel program.
/// since:
/// 1.4.0
  FLCountryUnitedKingdom = 5,
/// United States is a country of issue for a card linked with a Fidel program.
/// since:
/// 1.4.0
  FLCountryUnitedStates = 6,
};

@class NSString;
@class UIImage;
@class NSNumber;
@class UIViewController;
@class FLLinkResult;
@class FLLinkError;

/// Use this facade class to initialise and start a Fidel card linking experience.
/// It has many static properties which you can set to configure and customize the experience.
/// <h2>See also:</h2>
/// <ul>
///   <li>
///     <a href="x-source-tag://apiKey">Fidel.apiKey</a> - Set your SDK key.
///   </li>
///   <li>
///     <a href="x-source-tag://programId">Fidel.programId</a> - Set you program ID.
///   </li>
///   <li>
///     <a href="x-source-tag://present">Fidel.present function</a> - Present the card linking UI.
///   </li>
/// </ul>
/// version:
/// 1.9.0
/// since:
/// 1.0
SWIFT_CLASS_NAMED("Fidel")
@interface FLFidel : NSObject
/// <em>Required</em> for card linking. Get it from your Fidel dashboard, Account Settings, SDK Keys section.
/// note:
/// If you use a <em>test SDK Key</em>, please use the following test card numbers:
/// <ul>
///   <li>
///     <em>VISA</em>: 4444000000004*** (the last 3 numbers can be anything)
///   </li>
///   <li>
///     <em>Mastercard</em>: 5555000000005*** (the last 3 numbers can be anything)
///   </li>
///   <li>
///     <em>American Express</em>: 3400000000003** or 3700000000003** (the last 2 numbers can be anything)
///   </li>
/// </ul>
/// <h2>See also:</h2>
/// <ul>
///   <li>
///     <a href="x-source-tag://programId">Fidel.programId</a> - Set you program ID.
///   </li>
/// </ul>
/// since:
/// 1.0
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable apiKey;)
+ (NSString * _Nullable)apiKey SWIFT_WARN_UNUSED_RESULT;
+ (void)setApiKey:(NSString * _Nullable)value;
/// <em>Required</em> for card linking. Get it from your Fidel dashboard.
/// <h2>See also:</h2>
/// <ul>
///   <li>
///     <a href="x-source-tag://apiKey">Fidel.apiKey</a> - Set your SDK key.
///   </li>
/// </ul>
/// since:
/// 1.0
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable programId;)
+ (NSString * _Nullable)programId SWIFT_WARN_UNUSED_RESULT;
+ (void)setProgramId:(NSString * _Nullable)value;
/// Will display the banner image that you set in this parameter at the top of the card details
/// The banner image will take the device’s width, but it has a fixed height of 100 pts.
/// The image view has an <code>Aspect Fill</code> content mode, which means that the banner image
/// that you set will fill its entire predefined area, while keeping the aspect ratio.
/// For the banner image that you can set, we suggest to use the aspect ratio of the smallest devices that you support.
/// If you support 4” iPhones (iPhone 5s, 5c etc.), the aspect ratio would be <em>320 : 100</em>.
/// If the smallest device that you support is 4.7” iPhones (iPhone 6, 7, 8 etc.),
/// the aspect ratio of your banner image would be <em>375 : 100</em>.
/// We’re just suggesting the aspect ratios, but you can make the image as pixel dense as you like.
/// Of course, you need to provide the image for all screen densities (x1, x2 and x3).
/// Please take into consideration that the banner image will be cropped from top and bottom sides, on wider devices.
/// This is because of the <code>Aspect Fill</code> content mode that we set for the image view.
/// Depending on what you want to display in the banner image, you might need to experiment a bit to make sure
/// that nothing important from the image is hidden. The most important information should be displayed in the
/// centre of the banner image.
/// note:
///
/// This parameter is <em>optional</em>.
/// The default value is <code>nil</code>.
/// since:
/// 1.0
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nullable bannerImage;)
+ (UIImage * _Nullable)bannerImage SWIFT_WARN_UNUSED_RESULT;
+ (void)setBannerImage:(UIImage * _Nullable)value;
/// When set to <code>true</code>, automatically starts card camera scanning UI.
/// After card scanning is finalized, the user will go to our normal card linking UI.
/// note:
/// This parameter is <em>optional</em>. The default value is <code>false</code>.
/// since:
/// 1.0
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL autoScan;)
+ (BOOL)autoScan SWIFT_WARN_UNUSED_RESULT;
+ (void)setAutoScan:(BOOL)value;
/// Use this object to store custom data assigned to a linked card. The metadata <code>"id"</code>
/// property is a non-unique index, so you can set it to a custom UID (unique identifier).
/// Later you can query the cards using the same metadata ID.
/// You can use our <a href="https://reference.fidel.uk/v1/reference#list-cards-from-metadata-id">List Cards from Metadata ID</a> API Endpoint. Example meta data:
/// \code
/// Fidel.metaData = [
///     "id": "this-is-the-metadata-id",
///     "myUserId": "123",
///     "customKey1": "customValue1"
/// ]
///
/// \endcode<h3>Useful documentation</h3>
/// <ul>
///   <li>
///     <a href="https://reference.fidel.uk/v1/reference#list-cards-from-metadata-id">List Cards from Metadata ID</a>
///   </li>
/// </ul>
/// note:
///
/// This parameter is <em>optional</em>.
/// The default value is <code>nil</code>.
/// since:
/// 1.0
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSDictionary<NSString *, id> * _Nullable metaData;)
+ (NSDictionary<NSString *, id> * _Nullable)metaData SWIFT_WARN_UNUSED_RESULT;
+ (void)setMetaData:(NSDictionary<NSString *, id> * _Nullable)value;
/// Sets the list of countries that a user can pick to be the card issuing country.
/// When 2 or more countries are set, users will be able to select the card issuing country with our country selection UI.
/// The SDK will send the appropriate country code, depending on the country the user selects.
/// If you set an array with only one country (<code>count</code> of this array == 1), the country selection UI will not be displayed in
/// the card details form. The country that you set will be considered the card issuing country for all cards linked with your
/// Fidel program.
/// If you set an empty array value, you will not be able to present the Fidel card linking UI.
/// Immediately after attempting to present the UI with an empty value set to this parameter,
/// you will receive a <code>FLLinkError</code> in your <a href="x-source-tag://present">present function</a> error callback.
/// <h2>Example:</h2>
/// \code
/// FLFidel.objc_allowedCountries = @[
///     @(FLCountryIreland),
///     @(FLCountryUnitedKingdom),
///     @(FLCountryJapan),
///     @(FLCountryUnitedStates),
///     @(FLCountrySweden)
/// ];
///
/// \endcodewarning:
/// If your countries array includes a North American country (US or Canada), you also need to provide a value
/// for the <a href="x-source-tag://termsConditionsURL">FLFidel.termsConditionsURL</a>
/// <h2>See also:</h2>
/// <ul>
///   <li>
///     <a href="x-source-tag://Fidel.Country">FLCountry</a>
///   </li>
///   <li>
///     <a href="x-source-tag://termsConditionsURL">FLFidel.termsConditionsURL</a>
///   </li>
///   <li>
///     The <a href="x-source-tag://present">present function</a> that presents the card linking UI and also registers success/failure callbacks
///   </li>
/// </ul>
/// note:
///
/// This parameter is <em>optional</em> to set, but it’s a <em>mandatory</em> property.
/// The default value is the array of all countries supported by Fidel.
/// since:
/// 1.8.3
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<NSNumber *> * _Nonnull objc_allowedCountries;)
+ (NSArray<NSNumber *> * _Nonnull)objc_allowedCountries SWIFT_WARN_UNUSED_RESULT;
+ (void)setObjc_allowedCountries:(NSArray<NSNumber *> * _Nonnull)newValue;
/// Sets a list of supported card schemes. If a card scheme is supported, users will be able to submit the card linking form
/// with the supported card. If a card scheme is not in the list, then the user will receive an error message while typing
/// the unsupported card number.
/// If you set a <code>nil</code> value, you will not be able to present the Fidel card linking UI.
/// Immediately after attempting to present the UI with a <code>nil</code> value set to this parameter, you will receive a
/// <code>FLLinkError</code> in your <a href="x-source-tag://present">present function</a> error callback.
/// <h2>Example:</h2>
/// \code
/// FLFidel.objc_supportedCardSchemes = [NSSet setWithObjects:
///                                      @(FLCardSchemeVisa),
///                                      @(FLCardSchemeMastercard),
///                                      @(FLCardSchemeAmericanExpress), nil];
///
/// \endcode<h2>See also:</h2>
/// <ul>
///   <li>
///     <a href="x-source-tag://Fidel.CardScheme">FLCardScheme</a>
///   </li>
/// </ul>
/// note:
///
/// This parameter is <em>optional</em> to set, but it’s a <em>mandatory</em> property.
/// The default value is a set of all supported card schemes.
/// since:
/// 1.5.1
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSSet<NSNumber *> * _Nonnull objc_supportedCardSchemes;)
+ (NSSet<NSNumber *> * _Nonnull)objc_supportedCardSchemes SWIFT_WARN_UNUSED_RESULT;
+ (void)setObjc_supportedCardSchemes:(NSSet<NSNumber *> * _Nonnull)value;
/// The value of this parameter will be used in the card linking consent text that the user will
/// need to read & agree with, before linking a card.
/// <h2>See also:</h2>
/// <ul>
///   <li>
///     <a href="x-source-tag://termsConditionsURL">termsConditionsURL</a>
///   </li>
///   <li>
///     <a href="x-source-tag://privacyURL">privacyURL</a>
///   </li>
///   <li>
///     <a href="x-source-tag://programName">programName</a>
///   </li>
///   <li>
///     <a href="x-source-tag://deleteInstructions">deleteInstructions</a>
///   </li>
/// </ul>
/// note:
///
/// The default value for this parameter is <code>"Company Name"</code>, so we suggest setting it.
/// The maximum number of characters allowed is <code>60</code>.
/// since:
/// 1.4.0
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull companyName;)
+ (NSString * _Nonnull)companyName SWIFT_WARN_UNUSED_RESULT;
+ (void)setCompanyName:(NSString * _Nonnull)value;
/// The value of this parameter will be used in the card linking consent text when the selected
/// country is North American country. That’s if a North American is set in the <code>allowedCountries</code> parameter.
/// If a North American country is not a member of the list, then you don’t need to set this parameter.
/// <h2>See also:</h2>
/// <ul>
///   <li>
///     <a href="x-source-tag://termsConditionsURL">termsConditionsURL</a>
///   </li>
///   <li>
///     <a href="x-source-tag://privacyURL">privacyURL</a>
///   </li>
///   <li>
///     <a href="x-source-tag://programName">programName</a>
///   </li>
///   <li>
///     <a href="x-source-tag://deleteInstructions">deleteInstructions</a>
///   </li>
/// </ul>
/// note:
///
/// This parameter is <em>optional</em>.
/// The default value for this parameter will be <code>"our"</code> (or the translated, equivalent text).
/// The maximum number of characters allowed is <code>60</code>.
/// since:
/// 1.8.0
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull programName;)
+ (NSString * _Nonnull)programName SWIFT_WARN_UNUSED_RESULT;
+ (void)setProgramName:(NSString * _Nonnull)value;
/// This parameter is used and is <em>mandatory</em> when the <a href="x-source-tag://allowedCountries">Fidel.allowedCountries</a>
/// parameter contains a North American country.
/// It is applied as a hyperlink over the <code>Terms and Conditions</code> (or translated equivalent) text.
/// If a valid URL is <em>not</em> provided in this scenario then you will not be able to present the card linking UI.
/// Instead you will receive a <code>LinkError</code> in your <a href="x-source-tag://present">present function</a> error callback.
/// The “Terms and Conditions”(or translated equivalent) text and the hyperlink will be displayed <em>only</em> when
/// the selected country is a North American country. For the other countries we display a different consent
/// text that does not need the terms and conditions URL.
/// <h2>See also:</h2>
/// <ul>
///   <li>
///     <a href="x-source-tag://termsConditionsURL">allowedCountries</a>
///   </li>
///   <li>
///     <a href="x-source-tag://companyName">companyName</a>
///   </li>
///   <li>
///     <a href="x-source-tag://privacyURL">privacyURL</a>
///   </li>
///   <li>
///     <a href="x-source-tag://programName">programName</a>
///   </li>
///   <li>
///     <a href="x-source-tag://deleteInstructions">deleteInstructions</a>
///   </li>
/// </ul>
/// note:
///
/// This parameter is <em>not used</em> and not needed in the card linking consent, if the <a href="x-source-tag://allowedCountries">Fidel.allowedCountries</a> parameter does not include a North American country.
/// The default value for this parameter is <code>nil</code>.
/// since:
/// 1.8.0
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable termsConditionsURL;)
+ (NSString * _Nullable)termsConditionsURL SWIFT_WARN_UNUSED_RESULT;
+ (void)setTermsConditionsURL:(NSString * _Nullable)value;
/// If you provide a value for this parameter, the card linking consent text will include a phrase
/// that will provide the user with more privacy related information at the link that you provide.
/// When the value of this parameter remains <code>nil</code> no such phrase will be displayed in
/// the card linking consent text.
/// If you provide an invalid URL string, you will not be able to
/// present the card linking UI. Instead you will receive a <code>LinkError</code> in your <a href="x-source-tag://present">present function</a> error callback, immediately after attempting to present the UI.
/// <h2>See also:</h2>
/// <ul>
///   <li>
///     <a href="x-source-tag://termsConditionsURL">allowedCountries</a>
///   </li>
///   <li>
///     <a href="x-source-tag://companyName">companyName</a>
///   </li>
///   <li>
///     <a href="x-source-tag://termsConditionsURL">termsConditionsURL</a>
///   </li>
///   <li>
///     <a href="x-source-tag://programName">programName</a>
///   </li>
///   <li>
///     <a href="x-source-tag://deleteInstructions">deleteInstructions</a>
///   </li>
/// </ul>
/// note:
///
/// This parameter is <em>optional</em>.
/// The default value is <code>nil</code>.
/// since:
/// 1.4.0
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable privacyURL;)
+ (NSString * _Nullable)privacyURL SWIFT_WARN_UNUSED_RESULT;
+ (void)setPrivacyURL:(NSString * _Nullable)value;
/// If you provide a value for this parameter you will provide helping instructions for users to
/// delete a linked card. We will display these instructions in the card linking consent text.
/// The user has to agree with it before linking a card.
/// This parameter is <em>optional</em>, but we suggest to set what’s appropriate for your users.
/// <h2>See also:</h2>
/// <ul>
///   <li>
///     <a href="x-source-tag://termsConditionsURL">allowedCountries</a>
///   </li>
///   <li>
///     <a href="x-source-tag://companyName">companyName</a>
///   </li>
///   <li>
///     <a href="x-source-tag://termsConditionsURL">termsConditionsURL</a>
///   </li>
///   <li>
///     <a href="x-source-tag://privacyURL">privacyURL</a>
///   </li>
///   <li>
///     <a href="x-source-tag://programName">programName</a>
///   </li>
/// </ul>
/// note:
///
/// The default value for this parameter will be <em>“going to your account settings”</em> (or the
/// equivalent, translated text)
/// The maximum number of characters allowed is 60.
/// since:
/// 1.4.0
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull deleteInstructions;)
+ (NSString * _Nonnull)deleteInstructions SWIFT_WARN_UNUSED_RESULT;
+ (void)setDeleteInstructions:(NSString * _Nonnull)value;
/// Presents the card linking UI.
/// To get the result use the <code>onCardLinkedCallback</code> and <code>onCardLinkFailedCallback</code> callback parameters.
/// <h2>See also:</h2>
/// <ul>
///   <li>
///     <a href="x-source-tag://OnCardLinked">OnCardLinked</a>
///   </li>
///   <li>
///     <a href="x-source-tag://OnCardLinkFailed">OnCardLinkFailed</a>
///   </li>
///   <li>
///     <a href="x-source-tag://LinkResult">LinkResult</a>
///   </li>
///   <li>
///     <a href="x-source-tag://LinkError">LinkError</a>
///   </li>
/// </ul>
/// since:
/// 1.0
/// \param presentingViewController the <code>ViewController</code> that will present the Fidel card linking <code>ViewController</code>. This is a <em>mandatory</em> parameter.
///
/// \param onCardLinkedCallback Will be called when card linking succeeds. It will send a <code>LinkResult</code> as a parameter. This is an <em>optional</em> parameter. Default value is <code>nil</code>.
///
/// \param onCardLinkFailedCallback Will be called when card linking fails. It will send a <code>LinkError</code> as a parameter. This is an <em>optional</em> parameter. Default value is <code>nil</code>.
///
+ (void)present:(UIViewController * _Nonnull)presentingViewController onCardLinkedCallback:(void (^ _Nullable)(FLLinkResult * _Nonnull))onCardLinkedCallback onCardLinkFailedCallback:(void (^ _Nullable)(FLLinkError * _Nonnull))onCardLinkFailedCallback;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// A card linking error result object which offers card linking error details.
/// <h2>See also:</h2>
/// <ul>
///   <li>
///     <a href="x-source-tag://OnCardLinkFailed">OnCardLinkFailed</a>
///   </li>
///   <li>
///     <a href="x-source-tag://LinkResult">LinkResult</a>
///   </li>
/// </ul>
/// since:
/// 1.0.2
SWIFT_CLASS_NAMED("LinkError")
@interface FLLinkError : NSObject
/// The unlocalized message of the error.
/// since:
/// 1.0.2
@property (nonatomic, copy) NSString * _Nonnull message;
/// The date the card linking error occurred. It is formatted as a string. Format of the date: <code>yyyy-MM-dd'T'HH:mm:ssZZZZZ</code>.
/// Example values: 2021-05-19T16:34:20.497Z.
/// since:
/// 1.0.2
@property (nonatomic, copy) NSString * _Nullable date;
/// The code of the error.
/// since:
/// 1.0.2
@property (nonatomic, copy) NSString * _Nullable code;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Check properties of this class to get details about the linked card.
/// You can obtain a LinkResult object by implementing the <code>onCardLinkedCallback</code> parameter of the <a href="x-source-tag://present">Fidel.present function</a>.
/// <h2>See also:</h2>
/// <ul>
///   <li>
///     <a href="x-source-tag://present">Fidel.present function</a>
///   </li>
///   <li>
///     <a href="x-source-tag://OnCardLinked">OnCardLinked</a>
///   </li>
///   <li>
///     <a href="x-source-tag://LinkError">LinkError</a>
///   </li>
/// </ul>
/// since:
/// 1.0.2
SWIFT_CLASS_NAMED("LinkResult")
@interface FLLinkResult : NSObject
/// The identifier of the card linked with your Fidel program.
/// since:
/// 1.0.2
@property (nonatomic, copy) NSString * _Nonnull id;
/// The date when the card was linked. It is formatted as a string. The following is an example: <code>2021-05-19T12:37:55.278Z</code>.
/// since:
/// 1.0.2
@property (nonatomic, copy) NSString * _Nullable created;
/// The date when the card was updated. In case of card linking, this date corresponds with <a href="x-source-tag://LinkResult.created">created</a> property. It is formatted as a string. The following is an example: <code>2021-05-19T12:37:55.278Z</code>.
/// <h2>See also:</h2>
/// <ul>
///   <li>
///     <a href="x-source-tag://LinkResult.created">created</a>
///   </li>
/// </ul>
/// warning:
/// Deprecated because it is always equal with <a href="x-source-tag://LinkResult.created">created</a> property. Please use <a href="x-source-tag://LinkResult.created">created</a> instead.
/// since:
/// 1.0.2
@property (nonatomic, copy) NSString * _Nullable updated SWIFT_DEPRECATED_MSG("Please use the `created` property instead.", "created");
/// The type of card that was linked. Possible values are: <code>"visa"</code>, <code>"mastercard"</code>, <code>"amex"</code>.
/// <h2>See also:</h2>
/// <ul>
///   <li>
///     <a href="x-source-tag://LinkResult.scheme">scheme</a>
///   </li>
/// </ul>
/// warning:
/// Deprecated because it is always equal with <a href="x-source-tag://LinkResult.scheme">scheme</a> property. Please use <a href="x-source-tag://LinkResult.scheme">scheme</a> instead.
/// since:
/// 1.0.2
@property (nonatomic, copy) NSString * _Nullable type SWIFT_DEPRECATED_MSG("Please use the `scheme` property instead.", "scheme");
/// The linked card scheme. Possible values are: <code>"visa"</code>, <code>"mastercard"</code>, <code>"amex"</code>.
/// since:
/// 1.0.2
@property (nonatomic, copy) NSString * _Nullable scheme;
/// The program identifier that the card was linked with.
/// since:
/// 1.0.2
@property (nonatomic, copy) NSString * _Nullable programId;
@property (nonatomic) BOOL mapped SWIFT_DEPRECATED;
/// This property will be <code>true</code> when your Fidel account is live. If your account is not
/// live then this property will be <code>false</code>.
/// since:
/// 1.0.2
@property (nonatomic) BOOL live;
/// If available, this property will be populated with the first 6 numbers of the linked card. To
/// turn on or off receiving these numbers in the card linking result object, please check your
/// Fidel account’s Security settings.
/// since:
/// 1.8.4
@property (nonatomic, copy) NSString * _Nullable firstNumbers;
/// If available, this property will be populated with the last 4 numbers of the linked card. To
/// turn on or off receiving these numbers in the card linking result object, please check your
/// Fidel account’s Security settings.
/// since:
/// 1.0.2
@property (nonatomic, copy) NSString * _Nullable lastNumbers;
/// The expiration year of the linked card. The values are full year values (2023),
/// not shortened year values (23).
/// since:
/// 1.0.2
@property (nonatomic) NSInteger expYear;
/// The expiration month of the linked card. The values start with <code>1</code> - January and end
/// with <code>12</code> - December.
/// since:
/// 1.0.2
@property (nonatomic) NSInteger expMonth;
/// The expiration date of the linked card, formatted as a string. Example values:
/// <ul>
///   <li>
///     2024-01-31T23:59:59.999Z
///   </li>
///   <li>
///     2023-12-31T23:59:59.999Z
///   </li>
/// </ul>
/// since:
/// 1.0.2
@property (nonatomic, copy) NSString * _Nullable expDate;
/// The country code of the linked card. Possible values: <code>"ARE"</code>(United Arab Emirates), <code>"CAN"</code> (Canada), <code>"GBR"</code> (Great Britain),
/// <code>"IRL"</code> (Ireland), <code>"JPN"</code> (Japan),
/// <code>"SWE"</code> (Sweden), <code>"USA"</code> (United States of America).
/// since:
/// 1.0.2
@property (nonatomic, copy) NSString * _Nullable countryCode;
/// The Fidel account identifier under which the card was linked to.
/// since:
/// 1.0.2
@property (nonatomic, copy) NSString * _Nullable accountId;
/// The custom data assigned to the linked card. You can use our <a href="https://reference.fidel.uk/v1/reference#list-cards-from-metadata-id">List Cards from Metadata ID</a>
/// API Endpoint to query the cards using the same metadata ID.
/// Example of meta data that you can set with the <a href="x-source-tag://metaData">Fidel.metadata</a> property:
/// \code
/// Fidel.metaData = [
///     "id": "this-is-the-metadata-id",
///     "myUserId": "123",
///     "customKey1": "customValue1"
/// ]
///
/// \endcodeWith the example above, you will receive the same values back.
/// <h2>See also:</h2>
/// <ul>
///   <li>
///     <a href="x-source-tag://metaData">Fidel.metadata</a>
///   </li>
/// </ul>
/// since:
/// 1.0.2
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable metaData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
